What is Computation & Pythons Basics: 
  - Computers do calculations and store results. They do built-in language calculations or programs that programmers write. 
  - Declarative Knowledge: statement of fact.
  - imperative knowledge: How-to or Recipe to get to declarative knowledge
  - Algorithm: Sequence of steps, Flow of control process that specifies when each step is executed & a means of determining when to stop.
  - Scaler Objects: Cannot be subdivied. For Ex Integers (Int), Boolean (bool) etc 
  - Non Scaler Objects: can be subdivied. For Ex List of Int & strings = [5,bh,4,h] 
  - Expressions:  objects + operators 
  - operators:  + - * / %(reminder) and **(power). // = integer division, returns on the integer parts and drops off decimal values.  
  - variable = value stored in computer memory, this can be retrieved by typing that name. Easier to recall and used else where in the code.  
  - variable mem space = if the variable value is changed, the old value is still in the memory but without a handle and space is retrieved by python garbage collectors. 

Branching (conditionals) & Iteration (for/whole loops):
  - Strings: Can be letters, special characters, spaces, digits. When concanating strings, python will replace comma with spaces when used for concanating whereas + concanation will not add space.  
  - Camparisons: Python allows comparisons (>,<,>=,<=,==,!=) between same types (int,float,strings) and between int/floats but not between strings to int/float. 
  - Logical Operators on Booleans: not a -> True if a is false and False if a is True. a AND b -> True if both are True. a OR b -> True if either or both are True. 
  - Branching (Control Flow): "if" condition block, if the <condition> is True then evaluate expressions in that intended block. "else" blocks allows to run expressions if the prior "if" condition was False. "elif" allows for multiple "if" expressions in one conditional block of expressions. 
  - Loops: "while" loop is used if the condition is True then keep on looping basically Repeat until <condition> is false. "For" Loop is another method for running loops. "break" can be used to stop executing loop and exit out if it. 
  - Using "range" with For loop can allows to better flow control your loop. Syntax "range(start,stop,step)" , default value for start is 0 and step 1 and are optional. Range Start/Stop/Step can only be Ints, you can use "range(ord('a'), ord('z')+1)" for looping over english alphabets.  
  - "For" vs "While" -> use "For" when you have better idea of numbers of itereations and "while" when loop input in unpredictable. 
  
String Manipulation, Guess and Check, Approximations, Bisection:
  - String Indexing = Going Left to Right is 0, 1, 2...n and Right to Left is -1, -2, -3 ... -n
  - String Slice = Use [Start:Stop:Step], by default step is 1. You can omit numbers and just leave colons. 
  - Strings are immutable
  - Algorithm explanation in Algos section below. 
 
Decomposition, Abstractions, Functions: 
  - Decomposition: Spliting of larger program into smaller, reusable code that keeps your full program clean and coherent. This is done by using modules or functions in python followed by Class/Objects. 
  - Abstractions: Can be achieved with Function specifications or docstrings.
  - Functions: reusable piece of code. Runs when called or invoked. If no "return" in function, python returns "none" type. 
    - They have names
    - has parameters (sent to the functions, can be 0 or more)
    - has body and returns something. 
  - Note: Inside a function, you can access vaiable defined outside but you cannot modify a variable defind outside of that function. You can use global variable but they are not recommended. 
  
  
Tuples, Lists, Aliasing, Mutability and Cloning:
  - Tuples: 
    - collection of data where data can be of any type seprated by commas. 
	- They are immutable and cannot be modified. 
	- Created using parentheses "()". 
	- Tuple with one element = ("what",) ## Comma is required to show single element tuple. 
	- Great to return more than 1 value from function.  
  - Lists: 
    - Mutable collection of data where data can be of any type seprated by commas. 
	- Created using square brackets
	- Indices, ordering and slicing works same a Tuple 
	- List elements are indexed 0 to len(list) - 1
	- List operations: 
	  - Add element at end of list using append --> newlist.append("x")
	  - "+" operator = concatenates the lists, this will create a new List that combination of 2 other lists 
	  - extend method = Mutates list and adds other list elements to it. ex L1.extend([1,2]) --> will add 2 elements to L1 list. 
	  - del(L1[0]) -> will delete element in L1 index 0 
	  - L1.pop() -> removes element at end of list 
      - L1.remove(9) -> will remove element == 9 from the list. Only removes the first occurance of the element.  	  
    - Converting Lists to Strings & Vice versa 
	  - string to list = list(s) ## returns a list with every character of s as element
	  - string split at white space to list = s.split() ## splits on spaces if called without a parameter 
	  - list of characters into a string = ''.join(L1); if L1 = [1,2,3] then ''.join(L1) -> "123"
	- Sort: Mutates List to sort it.
	- Sorted: Returs new sorted list.  
    - reverse: Mutates List to reverse sort it. 
    - Aliasing: If List L1 = List L2 then changing L1 will change L2 in same way. 
	- Cloning: If you want to create a copy of List L1 then should NOT alter if L1 mutates then use cloaning. For Ex: L1 = L2[:] 
	- Note: Python keeps track of list indices if you modifiying the list within a loop over the same list. workaround, make a clone of list then modify it in a loop and reassign. 
	
Recursion and Dictionaries:
  - Recursion Algorithmically: a way to design solution to problems by decrease and conquer (aka reduce a problem to simpler versions of the same problem) 
  - Recursion semantically: A programming technique where a function calls itself. Goal is to not have infinite recursion. 
    - must have 1 or more base cases that are easy to solve. The base case if where you stop the recursion, in the example below for factorial, the base is when N == 1. 
	- must solve the same problem on some other input with the goal of simplifying the larger problem input. 
	- Each recursive call to a function creates its own scope. 
  - Simple Ex: Function to calculate Factorial of a whole number
    - def fact(n):
	    if n == 1:
		  return 1
		else:
		  return n*fact(n-1)
      print(fact(4))
  - Recursion is basically same a mathematical induction where we do if something is true for K then it will be true for K + 1. 
  - Fibonacci numbers: It has 2 base cases as the simplied version requires addition of different base cases. 
  - Another example of recursion is Palindrome (like ARORA)
  - Dictionaries: Stores the data in to a key, value format. Data is then accessed using the key as index. 
    - Represented by {}. Ex fruit_color = {}
	- Adding entry EX: fruit_color['mango'] = 'Yellow'
	- test if key present in dict EX: 'berry' in fruit_color -> returns false 
	- Remove entry Ex: del(fruit_color['mango'])
	- To access keys Ex: fruit_color.keys(), To access Values Ex: fruit_color.values() --> returns as list in random order. NOTE: As of python 3.7 dicts are ordered. 
	- Dict needs to have unique keys and immutable

Testing, Debugging, Exceptions, Assertions:
  - Testing: Allways test all units after new bugs were fixed. 
    - Unit Testing: validate each piece of program, testing each function separately. 
	- Regression Testing: Add test for bugs as you find them. Catch reintroduced errors that were previously fixed. 
	- Integration testing: Does overall program work ? Tend to rush to do this. 
  - Black Box testing: Done based on the DocString for the function, done without looking at the code to avoid implementer biases. Testing can be reused when code changes. 
  - Glass Box testing: Using the code itself to design test cases. AKA path-complete if every potential path through code is tested atleast once. 
  - Debugging Steps:
    - study available daya, form hypothesis, repeatable experiments and pick simplest input to test with. 
	- study program code and ask how did I get the unexpected result. 
  - Exceptions: AKA Errors. Exception to what the program expected. 
    - one method in Python is to use try/expect where you can handle Errors more gracefully in your code. 
	- Think of try/expect as if/else statements for error handling 
	- You can expand the try/expect to try/else/expect/finally where code in finally will be executed regardless of errors above. 
  - Assertions: Good example of defensive programming
    - Can be used as replacement for try/expect, assert can be placed in the start of a function and can verify incoming data and generate assert error. Function will stop execution if assertion expection is detected. 
	- Can also be used in unit testing.
	
OOP:
  - Everything in python is an Object ex string, list, dict, functions etc
  - You can create your own data type by using a Class.
  - Class:
    - Making a Class is like creating your own data type. 
    - Creating an instance of that class means that you are creating an object of that data type. You can as many objects as you want. Ex: Someone made a class for Dict and now we create as many objects of dict as needed and interact with them based on the methods implemented in that class. 
    - Class Attributes: Data and Procedures (methods)
    - Data Attributes: If you were building Class Car then tires, engines, seats will be data attributes. AKA Instance Variable
    - Procedure Attributes(methods): Same Class Car with data attributes will have methods like Mount the tires, bolt in the seats. 
    - This Data & Methods are Class specific, ex you cannot use these data and methods for Class Animal. (Exception Super Class) 
  - Defining a Class:
    - 1st - define how to create an instance of Object, done using a special method called __init__ to initialize some data attributes
    - the "self" in the def __init__(self, whatever): — represents a parameter that refers to an instance of the said Class. 
    - Argument for Self is not needed as python creates it itself. Ex conn = connection(ip_add, user, pass), In this ex, python will replace self with conn and save data attributes to the conn instance of connection class. 
    - Methods in Class are much like Functions that take parameters, perform operation and return value. Only difference is that they have "self" and dot notation. 
    - __str__ is another special method that can be used to return whatever you want when user prints Instance name. Ex print (conn) — will print whatever is returned from def __str__ that you need to define. 
    - you can define many other special methods for your class. For Example: simple operations like + can be defined as __add__ and it does something as you define. 
 
Python Classes and Inheritance : 
  - Class Getters: Methods in class that lets you retrieve class attributes. 
  - Class Setters: Methods that lets you set new class attributes. 
  - Not recommended to pull data for class attributes directly, it is recommended to use getters and setters. The idea is to maintain information hiding or basically we do not want users to know/understand how the class was written. 
  - Default Argument: Value of a parameter if user doesn't pass in any value. Ex: def name_obj(self, name="") 
  - Class Hierarchy
    - Parent Class (Superclass) Ex. Class Animal 
    - Child Class (subclass) Ex Class Dog, Class Cat
       - Inherits all data and behavior from Superclass
       - Add more info 
       - Add more behavior by adding new methods
       - Override behavior of parent class methods
  - Class Variable:
    - There values are shared between all instances of the class so these instances can modify them. 
    - If one instance of class modifies Class Variable then it is modified for all classes. 
    - Accessed using class name. Ex Cat.tag

Programing Efficiency Part-1: 
1. Efficiency - can be time or space (memory)
2. Recommended is to use "abstract notion of order of growth", this is better than measure of timer or count of operations. 
3. Timing is inconsistent because:
    1. Machines performance can vary
    2. Implementations of algo can vary 
    3. Data size can vary
4. Count of Operations is inconsistent:
    1. Data size will change number of operations as we do not have clear indication of which operations to count and how much 
    2. Depends on implementation
5. Big O, focus on dominant terms inside of the algorithm. Ignore the small steps + constants 
6. Analyze programs for their complexity :
    1. Check for statements inside functions
    2. Focus on dominant terms 
7. Law of Addition for Big O:
    1. O(f(n)) + O(g(n)) == O(f(n) + g(n))
    2. Ex O(n) + O(n*n ) == O(n + n^2) == O(n^2) because of dominant term. 
8. Law of Multiplication for Big O:
    1. Used in nested loops situation 
    2. O(f(n)) * O(g(n)) == O(f(n) * g(n))
    3. Ex: Nested for loop with depth of 2 == O(n) * O(n) = O(n^2)
    4. Above is n^2 because the otter loop goes over the inner loop in every iteration 
9. Complexity Classes:
    1. O(1) - constant running time
    2. O(log n) = Logarithmic running time. Basically Log of base 10 times n
    3. O(log* n) = log star N = num of times O(log n) is run. Example could be binary search if implemented with getting rid of not needed part of list (basically moving the mid, high, low pointers in each run)
    4. O(n) = Linear run time
    5. O(n log n) = log linear 
    6. O(n^c)  (c is a constant ) = Polynomial run time 
    7. O(c^n) = Exponential run time 

Programing Efficiency Part-2: 
1. Key Points:
    1. Something that reduces the size of N to N -1 to N-2 is Linear. Example Iterative/recursive factorial implementation are of same order of growth since the number of loops or recursive call is linear. 
    2. Something that reduces the size in half or third or quarter is Logarithmic. Basically reducing the size of input by a constant factor in each loop. Ex - Bisection search implemented where we reduce the size of list in each loop
    3. Polynomial algorithms are quadratic in nature, complexity grows with square the size of input. Ex: Nested Loops or recursive call that do not reduce the size of input
    4. Exponential Complexity: Ex Tower of Hanoi as on each recursive call we have 2 more calls. Multiple recursive call at each where list of data increases at each call. 

1. Linear search is O(n) but can be done on unsorted list. Worse case complexity is O(n).
2. Binary search complexity is O(log n) but list needs to be sorted. Sort is normally more expensive than O(n) but in the event the search is done multiple times then it is recommended to Sort once and then do searched multiple times. 
3. Ways to Sort using different Algos:
    1.  Money Sort or slow sort or Bogo Sort: Permutation circus, basically go random and hope it works. Best case complexity is O(n) and worse case is unbounded.
def bogo_sort(L):
    while not is_sorted(L):
        random.shuffle(L)
    2. Bubble Sort: Compare consecutive pairs of elements. Swap elements in pair such that smaller if first. Start over again when end of list is reached. Stop when no more swaps have been made. Largest unsorted element always at end after each pass. O(n^2) is worse case as there are 2 loops over N elements.
def bubble_sort(L):
    swap = false
    while not swap:
        for j in range(1, len(L):
             if L[j - 1]> L[j]:
                 swap = False
                  temp = L[j]
                  L[j] = L[j - 1]
                  L[j - 1] = temp
Inner FOR loop is doing comparison, outer While loop is doing multiple passes until no more swaps. 
    3. Selection Sort: First Step: Extract minimum element and swap the element at index 0. Subsequent Step, extract minimum element on remaining sublist and swap it with the element at index i position.
def selection_sort(L):
    suffixSt = 0
    while suffixST != len(L):
         for i in range(suffixST, len(L)):
             if L[i] < L[suffixST]:
                 L[suffixST], L[i] = L[I], L[suffixST]
          suffixST += 1
Outer Loop executes len(L) times and inner loop executes len(L) - i times. Complexity is O(n^2) where n = len(L)
    4. Merge Sort: Divide the unsorted list into 2 until you have 1 element in the list, then sort and merge back to top level list. We are only going to look at element once which is a nice property to reduce the complexity of the code.
def merge(left, right):
    result = []
    i,j = 0,0
    while i < len(left) and j < len(right):
        if left[ i ] < right[j]:
             result.append(left[ i ])
             i += 1
        else:
             result.append(right[j])
             j += 1
     while (i < len(left)):
             result.append(left[ i ])
             i +=1
     while (j < len(right)):
             result.append(right[j])
             j += 1
     return result

def merge_sort(L):
    if len(L) < 2:
        return L[:]
    else:
         middle = len(L) // 2
         left = merge_sort(L[:middle])
         right = merge_sort(L[middle:])
         return merge(left, right)
Complexity of Merge Sort is O(n log(n)) where n is the length of list L.


Algos:
======
Guess and Check: Finding a solution by exhausting the possible answers. 
cube = 8
for guess in range (abs(cube) + 1):
    if guess**3 >= cube:
	    break
if guess**3 != abs(cube):
    print (cube, 'is not a perfect cube')
else:
    if cube < 0:
        guess = -guess	
***************************************
Approximations: Basically increamenting by a small number and agreeing to an answer thats within the range of the actual answer and stoping when it is within a Epsilon (closest to the actual answer). Not a good solution as your guess can miss the epsilon and go into infinite loop. 
***************************************
Bisection Search: AKA Binary Search: Used to find the Index of an element in a Sorted List by dividing the Array/List and looking at the element at the middle of the List. If the element matches the element at the mid of the List the search is successful. If the target element is less than element at Mid then new end is set up as mid - 1 otherwise new start is set as mid + 1. 
The search converges around Log2N where N is the last index of the List. Ex, finding number in 0 - 100 would be within Log2 OF 100 which is equal to ~6.4. 

arry = [1,2,4,7,15,28,45,89]
target = 45
def binarysrh(arry,target):
    start = 0 #start counter at Zero
    end = len(arry) - 1 #End counter at last element in list 
    while start <= end: #Repeat Till start is less than or equal to End 
        mid = (start + end) // 2 # Divide the List by 2 and take middle as lower end rounder for the divison. 
        if arry[mid] == target: # is the middle index item your target ? 
            return mid  # Return if that is indeed your Target
        elif arry[mid] < target: # if that item is less than your start 
            start = mid + 1 # then make start point as mid + 1, this drops the first half of List reducing the size of array 
        elif arry[mid] > target: # if that item is more than your start 
            end = mid - 1 # then make end point as mid - 1, this drops the last half of List reducing the size of array 
    return -1 # Return -1 if target is not in List 

print (binarysrh(arry,target))
*****************************************
